name: Scrape and Deploy Listings

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches: [ master ]

jobs:
  scrape_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install jinja2
          pip install webdriver-manager

      - name: Update apt-get
        run: sudo apt-get update

      - name: Install Google Chrome #https://googlechromelabs.github.io/chrome-for-testing/#stable
        run: |
          # Remove existing chrome directory if it exists
          if [ -d "chrome" ]; then
            rm -rf chrome
          fi
          # Remove existing chrome zip if it exists
          if [ -f "chrome-headless-shell-linux64.zip" ]; then
            rm chrome-headless-shell-linux64.zip
          fi
          wget https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chrome-headless-shell-linux64.zip
          unzip chrome-headless-shell-linux64.zip -d chrome
          sudo mv chrome/chrome-headless-shell-linux64/* /usr/local/bin/
          sudo ln -s /usr/local/bin/headless_shell /usr/local/bin/google-chrome

      - name: Install ChromeDriver
        run: |
          # Remove existing chromedriver directory if it exists
          if [ -d "chromedriver" ]; then
            rm -rf chromedriver
          fi
          # Remove existing chromedriver-linux64.zip if it exists
          if [ -f "chromedriver-linux64.zip" ]; then
            rm chromedriver-linux64.zip
          fi
          wget https://storage.googleapis.com/chrome-for-testing-public/140.0.7339.207/linux64/chromedriver-linux64.zip
          unzip chromedriver-linux64.zip -d chromedriver
          sudo mv chromedriver/chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Verify installations
        run: |
          echo "Google Chrome version:"
          google-chrome --version
          echo "ChromeDriver version:"
          chromedriver --version
          echo "Google Chrome directory:"
          which google-chrome
          echo "ChromeDriver directory:"
          which chromedriver

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Remove existing listings.db
        run: |
          if [ -f listings.db ]; then
            rm listings.db
          fi

      - name: Run scraping script
        run: python scrapingscript.py

      - name: Check database and files
        run: |
          echo "Checking if database exists and has data:"
          if [ -f listings.db ]; then
            echo "Database file exists"
            sqlite3 listings.db "SELECT COUNT(*) FROM listings;" || echo "No listings table or error"
            sqlite3 listings.db "SELECT title FROM listings LIMIT 5;" || echo "No data in listings"
          else
            echo "Database file does not exist!"
          fi
          
          echo "Checking current directory contents:"
          ls -la
          
          echo "Checking if index.html exists:"
          if [ -f index.html ]; then
            echo "index.html exists"
          else
            echo "index.html does not exist!"
          fi

      - name: Generate static site
        run: python generate_static_site.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if there are any changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add listings.db index.html .nojekyll
          git commit -m 'Update listings.db and static site with new scraped data'
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
